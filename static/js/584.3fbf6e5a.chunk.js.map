{"version":3,"file":"static/js/584.3fbf6e5a.chunk.js","mappings":"oTAEaA,E,QAAgBC,GAAAA,IAAU,8F,kBCiBjCC,EAAO,qJA0BT,OA1BS,oCAUXC,iBAAmB,WACjB,MAAiD,EAAKC,MAA9CC,EAAc,EAAdA,eAGEC,EAHkC,EAApBC,qBAGtBC,KAAQF,QAGLA,EAAQG,SAIbJ,EAAeC,EACjB,EAAE,EAEFI,qBAAsBC,EAAAA,EAAAA,IAAQ,SAACC,EAAQC,GAAc,OACnDD,EAAOE,MAAK,YAAW,SAARC,SAAwBC,SAAWH,EAAeG,MAAM,GAAC,IACzE,EAwCA,OAxCA,0CAzBD,WACE,IAAQR,EAASS,KAAKb,MAAMG,qBAApBC,KAER,GAAIA,EAAM,CACR,IAAQF,EAAYE,EAAZF,QACRY,SAASC,MAAK,UAAMC,EAAAA,EAAS,cAAMd,EAAQe,KAC7C,CACF,GAAC,oBAoBD,WACE,MAAiDJ,KAAKb,MAA9CG,EAAoB,EAApBA,qBAAsBM,EAAc,EAAdA,eACtBS,EAA+Cf,EAA/Ce,UAAWC,EAAoChB,EAApCgB,QAASC,EAA2BjB,EAA3BiB,UAAWhB,EAAgBD,EAAhBC,KAAMiB,EAAUlB,EAAVkB,MAE7C,GAAID,EACF,OAAO,SAAC,KAAM,IAGhB,GAAID,EACF,OAAO,SAAC,KAAK,CAACE,MAAOA,IAGvB,GAAIH,EAAW,CACb,IAAQhB,EAAYE,EAAZF,QACAoB,EACNpB,EADMoB,QAASL,EACff,EADee,KAAMT,EACrBN,EADqBM,OAAQe,EAC7BrB,EAD6BqB,MAAOC,EACpCtB,EADoCsB,YAAanB,EACjDH,EADiDG,QAASoB,EAC1DvB,EAD0DuB,WAG5D,EAGIZ,KAAKP,oBAAoBE,EAAQC,GAFnCiB,EAAM,EAANA,OACYd,EAAM,EAAlBD,SAAYC,OAGd,OACE,UAAChB,EAAa,YACZ,SAAC,KAAa,CAACqB,KAAMA,EAAMK,QAASA,KACpC,SAAC,KAAkB,CACjBvB,iBAAkBc,KAAKd,iBACvBwB,MAAOA,EACPC,YAAaA,EACbnB,QAASA,EACToB,WAAYA,EACZC,OAAQA,EACRd,OAAQA,EACRK,KAAMA,MAId,CACF,KAAC,EAlEU,CAASU,EAAAA,eA+GhBC,EAAqB,CACzB3B,eAAAA,EAAAA,IAGI4B,GAAUC,EAAAA,EAAAA,KAVQ,SAAAC,GAGtB,MAAO,CAAEtB,gBAFcuB,EAAAA,EAAAA,GAAqBD,GAG9C,GAMyCH,GAEzC,GAAeK,EAAAA,EAAAA,IAAQJ,EAASK,EAAAA,GAAhC,CAAoDpC,E","sources":["pages/Product/Product.styled.jsx","pages/Product/Product.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const GridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 730px auto;\r\n  gap: 40px;\r\n`;\r\n","import { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport memoize from 'memoize-one';\r\n\r\n// redux\r\nimport { connect } from 'react-redux';\r\nimport { compose } from '@reduxjs/toolkit';\r\nimport { selectActiveCurrency } from 'redux/selectors';\r\nimport { addCartProduct } from 'redux/cart/cartSlice';\r\n\r\n// hoc\r\nimport { withGetProductById } from 'hoc';\r\n\r\n// components\r\nimport { Error, Loader, ProductDescription, ProductImages } from 'components';\r\nimport { GridContainer } from './Product.styled';\r\n\r\nimport { shopTitle } from 'constants/shopTitle';\r\n\r\nclass Product extends PureComponent {\r\n  componentDidUpdate() {\r\n    const { data } = this.props.getProductByIdStatus;\r\n\r\n    if (data) {\r\n      const { product } = data;\r\n      document.title = `${shopTitle} | ${product.name}`;\r\n    }\r\n  }\r\n\r\n  addProductToCart = () => {\r\n    const { addCartProduct, getProductByIdStatus } = this.props;\r\n\r\n    const {\r\n      data: { product },\r\n    } = getProductByIdStatus;\r\n\r\n    if (!product.inStock) {\r\n      return;\r\n    }\r\n\r\n    addCartProduct(product);\r\n  };\r\n\r\n  memoizedActivePrice = memoize((prices, activeCurrency) =>\r\n    prices.find(({ currency }) => currency.symbol === activeCurrency.symbol)\r\n  );\r\n\r\n  render() {\r\n    const { getProductByIdStatus, activeCurrency } = this.props;\r\n    const { isSuccess, isError, isLoading, data, error } = getProductByIdStatus;\r\n\r\n    if (isLoading) {\r\n      return <Loader />;\r\n    }\r\n\r\n    if (isError) {\r\n      return <Error error={error} />;\r\n    }\r\n\r\n    if (isSuccess) {\r\n      const { product } = data;\r\n      const { gallery, name, prices, brand, description, inStock, attributes } =\r\n        product;\r\n\r\n      const {\r\n        amount,\r\n        currency: { symbol },\r\n      } = this.memoizedActivePrice(prices, activeCurrency);\r\n\r\n      return (\r\n        <GridContainer>\r\n          <ProductImages name={name} gallery={gallery} />\r\n          <ProductDescription\r\n            addProductToCart={this.addProductToCart}\r\n            brand={brand}\r\n            description={description}\r\n            inStock={inStock}\r\n            attributes={attributes}\r\n            amount={amount}\r\n            symbol={symbol}\r\n            name={name}\r\n          />\r\n        </GridContainer>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nProduct.propTypes = {\r\n  getProductByIdStatus: PropTypes.shape({\r\n    data: PropTypes.shape({\r\n      product: PropTypes.shape({\r\n        attributes: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            type: PropTypes.oneOf(['swatch', 'text']).isRequired,\r\n            items: PropTypes.arrayOf(\r\n              PropTypes.shape({\r\n                displayValue: PropTypes.string.isRequired,\r\n                value: PropTypes.string.isRequired,\r\n                id: PropTypes.string.isRequired,\r\n              })\r\n            ),\r\n          })\r\n        ),\r\n        brand: PropTypes.string.isRequired,\r\n        description: PropTypes.string.isRequired,\r\n        gallery: PropTypes.array.isRequired,\r\n        inStock: PropTypes.bool.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        prices: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            amount: PropTypes.number.isRequired,\r\n            currency: PropTypes.shape({\r\n              symbol: PropTypes.string.isRequired,\r\n            }),\r\n          })\r\n        ),\r\n      }),\r\n    }),\r\n  }),\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const activeCurrency = selectActiveCurrency(state);\r\n\r\n  return { activeCurrency };\r\n};\r\n\r\nconst mapDispathcToProps = {\r\n  addCartProduct,\r\n};\r\n\r\nconst enhance = connect(mapStateToProps, mapDispathcToProps);\r\n\r\nexport default compose(enhance, withGetProductById)(Product);\r\n"],"names":["GridContainer","styled","Product","addProductToCart","props","addCartProduct","product","getProductByIdStatus","data","inStock","memoizedActivePrice","memoize","prices","activeCurrency","find","currency","symbol","this","document","title","shopTitle","name","isSuccess","isError","isLoading","error","gallery","brand","description","attributes","amount","PureComponent","mapDispathcToProps","enhance","connect","state","selectActiveCurrency","compose","withGetProductById"],"sourceRoot":""}