{"version":3,"file":"static/js/174.f6652b4d.chunk.js","mappings":"oUAGaA,EAAYC,EAAAA,GAAAA,GAAS,iJAUrBC,EAAiBD,EAAAA,GAAAA,EAAQ,+IAOzBE,EAAcF,EAAAA,GAAAA,GAAS,yKAUvBG,EAAiBH,EAAAA,GAAAA,GAAS,sJAU1BI,EAAiBJ,EAAAA,GAAAA,GAAS,qEAK1BK,EAAiBL,EAAAA,GAAAA,KAAW,6CAI5BM,EAAiBN,EAAAA,GAAAA,OAAa,6HAQvC,YACA,OADW,EAARO,UAEMC,EAAAA,EAAAA,IAAG,mEAKLA,EAAAA,EAAAA,IAAG,qFAIZ,I,6BCpCIC,EAAQ,qJAKV,OALU,oCACZC,iBAAmB,YAGjBC,EAF+B,EAAKC,MAA5BD,qBAGV,EAAC,EA4DA,OA5DA,8BAED,WACE,MAAsCE,KAAKD,MAAnCE,EAAQ,EAARA,SAAUC,EAAe,EAAfA,gBAEhBC,EAIED,EAJFC,SACAC,EAGEF,EAHFE,YACAC,EAEEH,EAFFG,OAAO,EAELH,EADFI,cAAAA,OAAa,MAAG,EAAC,EAGbC,GAAeC,QAAQF,GAE7B,OACE,iCACE,SAACpB,EAAS,oBACV,SAACG,EAAW,UACTkB,GACC,SAACnB,EAAc,gCAEfa,EAASQ,KAAI,SAAAC,GAAO,OAClB,SAAC,KAAW,CAEVA,QAASA,EACTC,SAAUA,EAAAA,EAAAA,MAFLD,EAAQE,GAGb,OAIR,SAACtB,EAAc,WACXiB,IACA,iCACE,UAAChB,EAAc,YACb,gCAAkB,IAAVsB,EAAAA,EAAa,SACrB,sCACA,sCAEF,UAACtB,EAAc,YACb,UAACC,EAAc,WACZW,EAASW,OACTT,EAAOU,QAAQ,OAElB,SAACvB,EAAc,UAAEc,KACjB,UAACd,EAAc,WACZW,EAASW,OACTV,EAAYW,QAAQ,eAM/B,SAACtB,EAAc,CACbuB,KAAK,SACLtB,SAAUa,EACVU,QAASjB,KAAKH,iBAAiB,qBAMvC,KAAC,EAjEW,CAASqB,EAAAA,eA8FjBC,EAAqB,CACzBrB,mBAAAA,EAAAA,IAGIsB,GAAUC,EAAAA,EAAAA,KAZQ,SAAAC,GAKtB,MAAO,CAAErB,UAJQsB,EAAAA,EAAAA,IAAmBD,GAIjBE,gBAHIC,EAAAA,EAAAA,IAAqBH,GAGTI,WAFjBC,EAAAA,EAAAA,IAAgBL,GAGpC,GAMyCH,GAEzC,GAAeS,EAAAA,EAAAA,IACbR,EACAS,EAAAA,GACAC,EAAAA,GAHF,CAIElC,EAAU,O","sources":["pages/Cart/Cart.styled.jsx","pages/Cart/Cart.jsx"],"sourcesContent":["import { css } from 'styled-components';\r\nimport styled from 'styled-components';\r\n\r\nexport const PageTitle = styled.h1`\r\n  margin-bottom: 54px;\r\n\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1.25;\r\n\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport const NoProductsStub = styled.p`\r\n  font-family: 'Roboto Condensed', sans-serif;\r\n  font-size: 24px;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const ProductList = styled.ul`\r\n  padding: 24px 0;\r\n  margin-bottom: 32px;\r\n\r\n  border-top: 1px solid #e5e5e5;\r\n  border-bottom: 1px solid #e5e5e5;\r\n\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const TotalCountList = styled.ul`\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  gap: 10px;\r\n\r\n  font-size: 24px;\r\n  line-height: 1.17;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const TotalCountItem = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const TotalCountSpan = styled.span`\r\n  font-weight: 700;\r\n`;\r\n\r\nexport const SubmitOrderBtn = styled.button`\r\n  padding: 13px 114px;\r\n\r\n  color: #fff;\r\n  border: none;\r\n\r\n  text-transform: uppercase;\r\n\r\n  ${({ disabled }) => {\r\n    if (disabled) {\r\n      return css`\r\n        background-color: #34ab53;\r\n      `;\r\n    }\r\n\r\n    return css`\r\n      background-color: #5ec071;\r\n      cursor: pointer;\r\n    `;\r\n  }};\r\n`;\r\n","import { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// hoc\r\nimport { withUpdateTitle, withActiveCartTotal } from 'hoc';\r\n\r\n// redux\r\nimport {\r\n  selectActiveCurrency,\r\n  selectCartProducts,\r\n  selectCartTotal,\r\n} from 'redux/selectors';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from '@reduxjs/toolkit';\r\nimport { removeCartProducts } from 'redux/cart/cartSlice';\r\n\r\n// components\r\nimport { CartProduct } from 'components';\r\nimport {\r\n  PageTitle,\r\n  ProductList,\r\n  TotalCountList,\r\n  TotalCountItem,\r\n  TotalCountSpan,\r\n  SubmitOrderBtn,\r\n  NoProductsStub,\r\n} from './Cart.styled';\r\n\r\n// constants\r\nimport cartType from 'constants/cartType';\r\nimport { taxRate } from 'constants/taxRate';\r\n\r\nclass CartPage extends PureComponent {\r\n  handleOrderClick = () => {\r\n    const { removeCartProducts } = this.props;\r\n\r\n    removeCartProducts();\r\n  };\r\n\r\n  render() {\r\n    const { products, activeCartTotal } = this.props;\r\n    const {\r\n      currency,\r\n      totalAmount,\r\n      taxPay,\r\n      totalQuantity = 0,\r\n    } = activeCartTotal;\r\n\r\n    const ifCartEmpty = !Boolean(totalQuantity);\r\n\r\n    return (\r\n      <>\r\n        <PageTitle>Cart</PageTitle>\r\n        <ProductList>\r\n          {ifCartEmpty ? (\r\n            <NoProductsStub>The cart is empty</NoProductsStub>\r\n          ) : (\r\n            products.map(product => (\r\n              <CartProduct\r\n                key={product.id}\r\n                product={product}\r\n                cartType={cartType.page}\r\n              />\r\n            ))\r\n          )}\r\n        </ProductList>\r\n        <TotalCountList>\r\n          {!ifCartEmpty && (\r\n            <>\r\n              <TotalCountItem>\r\n                <p>Tax {taxRate * 100}%:</p>\r\n                <p>Quantity:</p>\r\n                <p>Total:</p>\r\n              </TotalCountItem>\r\n              <TotalCountItem>\r\n                <TotalCountSpan>\r\n                  {currency.symbol}\r\n                  {taxPay.toFixed(2)}\r\n                </TotalCountSpan>\r\n                <TotalCountSpan>{totalQuantity}</TotalCountSpan>\r\n                <TotalCountSpan>\r\n                  {currency.symbol}\r\n                  {totalAmount.toFixed(2)}\r\n                </TotalCountSpan>\r\n              </TotalCountItem>\r\n            </>\r\n          )}\r\n        </TotalCountList>\r\n        <SubmitOrderBtn\r\n          type=\"button\"\r\n          disabled={ifCartEmpty}\r\n          onClick={this.handleOrderClick}\r\n        >\r\n          Order\r\n        </SubmitOrderBtn>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nCartPage.propTypes = {\r\n  products: PropTypes.array.isRequired,\r\n  activeCurrency: PropTypes.shape({\r\n    symbol: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n  }),\r\n  removeCartProducts: PropTypes.func.isRequired,\r\n  activeCartTotal: PropTypes.shape({\r\n    currency: PropTypes.shape({\r\n      label: PropTypes.string,\r\n      symbol: PropTypes.string,\r\n    }),\r\n    totalAmount: PropTypes.number,\r\n    taxPay: PropTypes.number,\r\n    totalQuantity: PropTypes.number,\r\n  }),\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const products = selectCartProducts(state);\r\n  const activeCurrency = selectActiveCurrency(state);\r\n  const cartTotal = selectCartTotal(state);\r\n\r\n  return { products, activeCurrency, cartTotal };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  removeCartProducts,\r\n};\r\n\r\nconst enhance = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default compose(\r\n  enhance,\r\n  withActiveCartTotal,\r\n  withUpdateTitle\r\n)(CartPage, 'Cart');\r\n"],"names":["PageTitle","styled","NoProductsStub","ProductList","TotalCountList","TotalCountItem","TotalCountSpan","SubmitOrderBtn","disabled","css","CartPage","handleOrderClick","removeCartProducts","props","this","products","activeCartTotal","currency","totalAmount","taxPay","totalQuantity","ifCartEmpty","Boolean","map","product","cartType","id","taxRate","symbol","toFixed","type","onClick","PureComponent","mapDispatchToProps","enhance","connect","state","selectCartProducts","activeCurrency","selectActiveCurrency","cartTotal","selectCartTotal","compose","withActiveCartTotal","withUpdateTitle"],"sourceRoot":""}